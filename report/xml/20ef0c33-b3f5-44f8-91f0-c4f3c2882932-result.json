{"name": "test_vip_info[case_data0]", "status": "broken", "statusDetails": {"message": "Exception: http状态码错误！\n 401 != 200", "trace": "self = <test_vip_info.TestVipInfo object at 0x000001DFC79344E0>\ncase_data = {'address': '/liuyi/rest76/user/vip_info', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_vip_info.json'}, 'cookies': True, 'depend': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"vip_info\")\n    @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_vip_info(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        if case_dict['test_case'][0]['depend'] != False:\n            param = case_dict['test_case'][0]['parameter']\n            par = dict(param, **get_pre_value())\n            set_state(par)\n            yamlvalue = load_yaml(case_dict['test_case'][0]['test_name'])\n            api_send_check(yamlvalue['test_case'], yamlvalue, PATH)\n        else:\n            self.init_relevance = ini_request(case_dict, PATH)\n            # print('1-----',case_data)\n            # print('2-----',case_dict)\n            # print('3-----',self.init_relevance)\n            # print('4-----',PATH)\n            # 发送测试请求\n>           api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\ntestcase\\user\\test_vip_info.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nunit\\apiSendCheck.py:37: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = 'vip_info'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_vip_info.json'}\ncode = 401, data = {'code': 401, 'data': None, 'message': '非法 token'}\n_path = 'F:/pythoncode/learn_pytest_20200720/page/user', relevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                401 != 200\n\nunit\\checkResult.py:60: Exception"}, "description": "\n\n        :param case_data: 测试用例\n        :return:\n        ", "steps": [{"name": "GET请求接口", "status": "passed", "attachments": [{"name": "请求接口", "source": "11e37446-a82e-4f4e-8ee2-80d84eb36f0d-attachment.attach"}, {"name": "请求地址", "source": "fde43eef-3ce9-40ec-9027-f28e9d3cb5c9-attachment.attach"}, {"name": "请求头", "source": "c0674add-85da-4b49-aa45-9cc5f92f12fc-attachment.attach"}, {"name": "请求参数", "source": "8336fe5e-b8a5-42c1-bcf1-b83127b67333-attachment.attach"}], "start": 1628733035308, "stop": 1628733035317}, {"name": "JSON格式校验", "status": "passed", "attachments": [{"name": "期望code", "source": "3a4e4da8-3bd9-487b-bf7b-4b21c9c216b5-attachment.attach"}, {"name": "期望data", "source": "69d98660-6147-41b2-8187-93c0c8636391-attachment.attach"}, {"name": "实际code", "source": "b208d751-7c96-48c3-b111-d2a26ac24c80-attachment.attach"}, {"name": "实际data", "source": "049f0ea4-5ee9-4aee-8b53-eb284ea28aac-attachment.attach"}], "start": 1628733035380, "stop": 1628733035388}], "attachments": [{"name": "log", "source": "fcbfd124-be1d-4a8f-9946-c5b6f6c91e13-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': 'vip_info', 'info': 'vip_info', 'http_type': 'http', 'request_type': 'GET', 'parameter_type': 'application/x-www-form-urlencoded', 'address': '/liuyi/rest76/user/vip_info', 'headers': {'Host': 'api.652615.com', 'X-Liuyi-App-Key': '735448165a81e5d026c69c653d5423b7', 'Accept': 'application/json, text/plain, */*', 'Authorization': 'Bearer 17d58d9224132591710dc7f6a251ce9f', 'Accept-Language': 'zh-cn', 'Accept-Encoding': 'gzip, deflate', 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8', 'X-Liuyi-Device-ID': '1B71FD42-A458-4E9A-9A0D-94AE0827AE7A', 'Origin': 'http://rest56.652615.com', 'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_5_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148', 'Referer': 'http://rest56.652615.com/?appKey=735448165a81e5d026c69c653d5423b7&deviceId=1B71FD42-A458-4E9A-9A0D-94AE0827AE7A&wechat=0', 'Connection': 'keep-alive'}, 'cookies': True, 'timeout': 20, 'parameter': {'aaa': 'bbb'}, 'file': False, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_vip_info.json'}, 'relevance': 'None', 'depend': False}"}], "start": 1628733035304, "stop": 1628733035389, "uuid": "be8db7f8-8a71-4be0-84cf-5c340aabf247", "historyId": "5d947e35d620ef30a17ce72a2d34b27d", "testCaseId": "afcc98ebac6b73f3d7f96361b2723e42", "fullName": "testcase.user.test_vip_info.TestVipInfo#test_vip_info", "labels": [{"name": "story", "value": "vip_info"}, {"name": "feature", "value": "user"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=3)"}, {"name": "parentSuite", "value": "testcase.user"}, {"name": "suite", "value": "test_vip_info"}, {"name": "subSuite", "value": "TestVipInfo"}, {"name": "host", "value": "CFDN-20190518ZE"}, {"name": "thread", "value": "440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.user.test_vip_info"}]}