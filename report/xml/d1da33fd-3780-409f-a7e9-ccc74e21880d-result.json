{"name": "test_first_in[case_data0]", "status": "broken", "statusDetails": {"message": "Exception: http状态码错误！\n 401 != 200", "trace": "self = <test_first_in.TestFirstIn object at 0x000001DFC791C8D0>\ncase_data = {'address': '/liuyi/rest76/user/first_in', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_first_in.json'}, 'cookies': True, 'depend': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"first_in\")\n    @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_first_in(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        if case_dict['test_case'][0]['depend'] != False:\n            param = case_dict['test_case'][0]['parameter']\n            par = dict(param, **get_pre_value())\n            set_state(par)\n            yamlvalue = load_yaml(case_dict['test_case'][0]['test_name'])\n            api_send_check(yamlvalue['test_case'], yamlvalue, PATH)\n        else:\n            self.init_relevance = ini_request(case_dict, PATH)\n            # 发送测试请求\n>           api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\ntestcase\\user\\test_first_in.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nunit\\apiSendCheck.py:37: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = 'first_in'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_first_in.json'}\ncode = 401, data = {'code': 401, 'data': None, 'message': '非法 token'}\n_path = 'F:/pythoncode/learn_pytest_20200720/page/user', relevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                401 != 200\n\nunit\\checkResult.py:60: Exception"}, "description": "\n\n        :param case_data: 测试用例\n        :return:\n        ", "steps": [{"name": "GET请求接口", "status": "passed", "attachments": [{"name": "请求接口", "source": "7cf6162b-4bff-40ba-b6d7-fd89041ba136-attachment.attach"}, {"name": "请求地址", "source": "8eea0f6b-128e-4aa9-b117-03850dd8f5bf-attachment.attach"}, {"name": "请求头", "source": "35f49847-3a03-481b-b232-e6965dbdc722-attachment.attach"}, {"name": "请求参数", "source": "4ef8fa13-4c3b-4e14-98b4-cc3490dd2ba2-attachment.attach"}], "start": 1628733018876, "stop": 1628733018982}, {"name": "JSON格式校验", "status": "passed", "attachments": [{"name": "期望code", "source": "c0e37a17-8be8-4fd7-b189-7159c9b1d07d-attachment.attach"}, {"name": "期望data", "source": "ba11bf25-07d5-4448-8e9a-e769bf9bbf70-attachment.attach"}, {"name": "实际code", "source": "b2013fd7-8669-4a6c-8044-aa95069b9a25-attachment.attach"}, {"name": "实际data", "source": "6007c9b3-a085-45ee-acb5-d33a2ffb87ae-attachment.attach"}], "start": 1628733019046, "stop": 1628733019055}], "attachments": [{"name": "log", "source": "73d16dab-bd3d-42b2-af73-30733fa5dbb8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'test_name': 'first_in', 'info': 'first_in', 'http_type': 'http', 'request_type': 'GET', 'parameter_type': 'application/x-www-form-urlencoded', 'address': '/liuyi/rest76/user/first_in', 'headers': {'Host': 'api.652615.com', 'X-Liuyi-App-Key': '735448165a81e5d026c69c653d5423b7', 'Accept': 'application/json, text/plain, */*', 'Authorization': 'Bearer 17d58d9224132591710dc7f6a251ce9f', 'Accept-Language': 'zh-cn', 'Accept-Encoding': 'gzip, deflate', 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8', 'X-Liuyi-Device-ID': '1B71FD42-A458-4E9A-9A0D-94AE0827AE7A', 'Origin': 'http://rest56.652615.com', 'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_5_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148', 'Referer': 'http://rest56.652615.com/?appKey=735448165a81e5d026c69c653d5423b7&deviceId=1B71FD42-A458-4E9A-9A0D-94AE0827AE7A&wechat=0', 'Connection': 'keep-alive'}, 'cookies': True, 'timeout': 20, 'parameter': {'aaa': 'bbb'}, 'file': False, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_first_in.json'}, 'relevance': 'None', 'depend': False}"}], "start": 1628733018872, "stop": 1628733019055, "uuid": "16bcc8d1-b9ac-4a32-91d4-298ca13ad5b7", "historyId": "9dde03f9242b4b4836ba77a65c3c19d0", "testCaseId": "8c05acaa57cd7e34d0bba5604ae77a82", "fullName": "testcase.user.test_first_in.TestFirstIn#test_first_in", "labels": [{"name": "feature", "value": "user"}, {"name": "story", "value": "first_in"}, {"name": "tag", "value": "flaky(reruns=3, reruns_delay=3)"}, {"name": "parentSuite", "value": "testcase.user"}, {"name": "suite", "value": "test_first_in"}, {"name": "subSuite", "value": "TestFirstIn"}, {"name": "host", "value": "CFDN-20190518ZE"}, {"name": "thread", "value": "440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.user.test_first_in"}]}