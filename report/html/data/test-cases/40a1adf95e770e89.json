{
  "uid" : "40a1adf95e770e89",
  "name" : "test_meirijingxuan[case_data0]",
  "fullName" : "testcase.home.test_meirijingxuan.TestMeirijingxuan#test_meirijingxuan",
  "historyId" : "c36d95af30ebaf767a12687fa3ee4bdf",
  "time" : {
    "start" : 1628732998982,
    "stop" : 1628732999075,
    "duration" : 93
  },
  "description" : "\n\n        :param case_data: 测试用例\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    :param case_data: 测试用例\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "Exception: http状态码错误！\n 401 != 200",
  "statusTrace" : "self = <test_meirijingxuan.TestMeirijingxuan object at 0x000001DFC7828208>\ncase_data = {'address': '/liuyi/rest76/home/meirijingxuan', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_meirijingxuan.json'}, 'cookies': True, 'depend': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"meirijingxuan\")\n    @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_meirijingxuan(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        if case_dict['test_case'][0]['depend'] == True:\n            param = case_dict['test_case'][0]['parameter']\n            par = dict(param, **get_pre_value())\n            set_state(par)\n            yamlvalue = load_yaml(case_dict['test_case'][0]['test_name'])\n            api_send_check(yamlvalue['test_case'], yamlvalue, PATH)\n        else:\n            self.init_relevance = ini_request(case_dict, PATH)\n            # 发送测试请求\n>           api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\ntestcase\\home\\test_meirijingxuan.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nunit\\apiSendCheck.py:37: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = 'meirijingxuan'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_meirijingxuan.json'}\ncode = 401, data = {'code': 401, 'data': None, 'message': '非法 token'}\n_path = 'F:/pythoncode/learn_pytest_20200720/page/home', relevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                401 != 200\n\nunit\\checkResult.py:60: Exception",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n\n        :param case_data: 测试用例\n        :return:\n        ",
    "status" : "broken",
    "statusMessage" : "Exception: http状态码错误！\n 401 != 200",
    "statusTrace" : "self = <test_meirijingxuan.TestMeirijingxuan object at 0x000001DFC7828208>\ncase_data = {'address': '/liuyi/rest76/home/meirijingxuan', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_meirijingxuan.json'}, 'cookies': True, 'depend': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"meirijingxuan\")\n    @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_meirijingxuan(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        if case_dict['test_case'][0]['depend'] == True:\n            param = case_dict['test_case'][0]['parameter']\n            par = dict(param, **get_pre_value())\n            set_state(par)\n            yamlvalue = load_yaml(case_dict['test_case'][0]['test_name'])\n            api_send_check(yamlvalue['test_case'], yamlvalue, PATH)\n        else:\n            self.init_relevance = ini_request(case_dict, PATH)\n            # 发送测试请求\n>           api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\ntestcase\\home\\test_meirijingxuan.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nunit\\apiSendCheck.py:37: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_name = 'meirijingxuan'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_meirijingxuan.json'}\ncode = 401, data = {'code': 401, 'data': None, 'message': '非法 token'}\n_path = 'F:/pythoncode/learn_pytest_20200720/page/home', relevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                401 != 200\n\nunit\\checkResult.py:60: Exception",
    "steps" : [ {
      "name" : "GET请求接口",
      "time" : {
        "start" : 1628732998986,
        "stop" : 1628732999000,
        "duration" : 14
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ce840e345b3af6c5",
        "name" : "请求接口",
        "source" : "ce840e345b3af6c5.attach",
        "type" : "text/plain",
        "size" : 13
      }, {
        "uid" : "d6c5bdc1fbdd35ea",
        "name" : "请求地址",
        "source" : "d6c5bdc1fbdd35ea.attach",
        "type" : "text/plain",
        "size" : 53
      }, {
        "uid" : "bd0dc2df2c9fbb84",
        "name" : "请求头",
        "source" : "bd0dc2df2c9fbb84.attach",
        "type" : "text/plain",
        "size" : 702
      }, {
        "uid" : "5b51d698bc1d2f9b",
        "name" : "请求参数",
        "source" : "5b51d698bc1d2f9b.attach",
        "type" : "text/plain",
        "size" : 20
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 4
    }, {
      "name" : "JSON格式校验",
      "time" : {
        "start" : 1628732999067,
        "stop" : 1628732999075,
        "duration" : 8
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8022b3d882f076fd",
        "name" : "期望code",
        "source" : "8022b3d882f076fd.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "7ea7e0de55175814",
        "name" : "期望data",
        "source" : "7ea7e0de55175814.attach",
        "type" : "text/plain",
        "size" : 3487
      }, {
        "uid" : "6a8e736d246c0856",
        "name" : "实际code",
        "source" : "6a8e736d246c0856.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "58e2057292946bcd",
        "name" : "实际data",
        "source" : "58e2057292946bcd.attach",
        "type" : "text/plain",
        "size" : 54
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 4
    } ],
    "attachments" : [ {
      "uid" : "7a4d7215a9257677",
      "name" : "log",
      "source" : "7a4d7215a9257677.txt",
      "type" : "text/plain",
      "size" : 4559
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 2,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 9
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "home"
  }, {
    "name" : "story",
    "value" : "meirijingxuan"
  }, {
    "name" : "tag",
    "value" : "flaky(reruns=3, reruns_delay=3)"
  }, {
    "name" : "parentSuite",
    "value" : "testcase.home"
  }, {
    "name" : "suite",
    "value" : "test_meirijingxuan"
  }, {
    "name" : "subSuite",
    "value" : "TestMeirijingxuan"
  }, {
    "name" : "host",
    "value" : "CFDN-20190518ZE"
  }, {
    "name" : "thread",
    "value" : "440-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.home.test_meirijingxuan"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'test_name': 'meirijingxuan', 'info': 'meirijingxuan', 'http_type': 'http', 'request_type': 'GET', 'parameter_type': 'application/x-www-form-urlencoded', 'address': '/liuyi/rest76/home/meirijingxuan', 'headers': {'Host': 'api.652615.com', 'X-Liuyi-App-Key': 'fa2f1a6dc9726b1ed50f3a4d430a9e67', 'Accept': 'application/json, text/plain, */*', 'Authorization': 'Bearer 9b5f39bae4784a8db7863d4fd3eea20b', 'Accept-Language': 'zh-cn', 'Accept-Encoding': 'gzip, deflate', 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8', 'X-Liuyi-Device-ID': 'fa2f1a6dc9726b1ed50f3a4d430a9e67', 'Origin': 'http://rest56.652615.com', 'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_5_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148', 'Referer': 'http://rest56.652615.com/?appKey=fa2f1a6dc9726b1ed50f3a4d430a9e67&deviceId=fa2f1a6dc9726b1ed50f3a4d430a9e67&wechat=0', 'Connection': 'keep-alive'}, 'cookies': True, 'timeout': 20, 'parameter': {'time': 1628151452}, 'file': False, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_meirijingxuan.json'}, 'relevance': 'None', 'depend': False}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "flaky(reruns=3, reruns_delay=3)" ]
  },
  "source" : "40a1adf95e770e89.json",
  "parameterValues" : [ "{'test_name': 'meirijingxuan', 'info': 'meirijingxuan', 'http_type': 'http', 'request_type': 'GET', 'parameter_type': 'application/x-www-form-urlencoded', 'address': '/liuyi/rest76/home/meirijingxuan', 'headers': {'Host': 'api.652615.com', 'X-Liuyi-App-Key': 'fa2f1a6dc9726b1ed50f3a4d430a9e67', 'Accept': 'application/json, text/plain, */*', 'Authorization': 'Bearer 9b5f39bae4784a8db7863d4fd3eea20b', 'Accept-Language': 'zh-cn', 'Accept-Encoding': 'gzip, deflate', 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8', 'X-Liuyi-Device-ID': 'fa2f1a6dc9726b1ed50f3a4d430a9e67', 'Origin': 'http://rest56.652615.com', 'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_5_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148', 'Referer': 'http://rest56.652615.com/?appKey=fa2f1a6dc9726b1ed50f3a4d430a9e67&deviceId=fa2f1a6dc9726b1ed50f3a4d430a9e67&wechat=0', 'Connection': 'keep-alive'}, 'cookies': True, 'timeout': 20, 'parameter': {'time': 1628151452}, 'file': False, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_meirijingxuan.json'}, 'relevance': 'None', 'depend': False}" ]
}